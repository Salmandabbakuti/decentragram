// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PostCreated extends ethereum.Event {
  get params(): PostCreated__Params {
    return new PostCreated__Params(this);
  }
}

export class PostCreated__Params {
  _event: PostCreated;

  constructor(event: PostCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get content(): string {
    return this._event.parameters[1].value.toString();
  }

  get imageHash(): string {
    return this._event.parameters[2].value.toString();
  }

  get earnings(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get author(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class TipCreated extends ethereum.Event {
  get params(): TipCreated__Params {
    return new TipCreated__Params(this);
  }
}

export class TipCreated__Params {
  _event: TipCreated;

  constructor(event: TipCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get postId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Decentragram__postsResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }
}

export class Decentragram__tipsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class Decentragram extends ethereum.SmartContract {
  static bind(address: Address): Decentragram {
    return new Decentragram("Decentragram", address);
  }

  posts(param0: BigInt): Decentragram__postsResult {
    let result = super.call(
      "posts",
      "posts(uint256):(uint256,string,string,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Decentragram__postsResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_posts(param0: BigInt): ethereum.CallResult<Decentragram__postsResult> {
    let result = super.tryCall(
      "posts",
      "posts(uint256):(uint256,string,string,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Decentragram__postsResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  tips(param0: BigInt): Decentragram__tipsResult {
    let result = super.call(
      "tips",
      "tips(uint256):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Decentragram__tipsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_tips(param0: BigInt): ethereum.CallResult<Decentragram__tipsResult> {
    let result = super.tryCall(
      "tips",
      "tips(uint256):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Decentragram__tipsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }
}

export class CreatePostCall extends ethereum.Call {
  get inputs(): CreatePostCall__Inputs {
    return new CreatePostCall__Inputs(this);
  }

  get outputs(): CreatePostCall__Outputs {
    return new CreatePostCall__Outputs(this);
  }
}

export class CreatePostCall__Inputs {
  _call: CreatePostCall;

  constructor(call: CreatePostCall) {
    this._call = call;
  }

  get _content(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _imageHash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreatePostCall__Outputs {
  _call: CreatePostCall;

  constructor(call: CreatePostCall) {
    this._call = call;
  }
}

export class TipCall extends ethereum.Call {
  get inputs(): TipCall__Inputs {
    return new TipCall__Inputs(this);
  }

  get outputs(): TipCall__Outputs {
    return new TipCall__Outputs(this);
  }
}

export class TipCall__Inputs {
  _call: TipCall;

  constructor(call: TipCall) {
    this._call = call;
  }

  get _postId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TipCall__Outputs {
  _call: TipCall;

  constructor(call: TipCall) {
    this._call = call;
  }
}
